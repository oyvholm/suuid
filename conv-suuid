#!/usr/bin/perl

#=======================================================================
# conv-suuid
# File ID: 39647b28-1261-11e5-9dd0-000df06acc56
#
# Convert suuid .xml to other formats.
#
# Character set: UTF-8
# ©opyleft 2015– Øyvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 2 or later, see end of 
# file for legal stuff.
#=======================================================================

use strict;
use warnings;
use Getopt::Long;

local $| = 1;

our %Opt = (

    'help' => 0,
    'output-format' => 'xml',
    'pg-table' => 0,
    'quiet' => 0,
    'verbose' => 0,
    'version' => 0,

);

our $progname = $0;
$progname =~ s/^.*\/(.*?)$/$1/;
our $VERSION = '0.00';

Getopt::Long::Configure('bundling');
GetOptions(

    'help|h' => \$Opt{'help'},
    'output-format|o=s' => \$Opt{'output-format'},
    'pg-table' => \$Opt{'pg-table'},
    'quiet|q+' => \$Opt{'quiet'},
    'verbose|v+' => \$Opt{'verbose'},
    'version' => \$Opt{'version'},

) || die("$progname: Option error. Use -h for help.\n");

$Opt{'verbose'} -= $Opt{'quiet'};
$Opt{'help'} && usage(0);
if ($Opt{'version'}) {
    print_version();
    exit(0);
}

exit(main(%Opt));

sub main {
    # {{{
    my %Opt = @_;
    my $Retval = 0;

    my $Lh = "[0-9a-fA-F]";
    my $Templ = "$Lh\{8}-$Lh\{4}-$Lh\{4}-$Lh\{4}-$Lh\{12}";
    my $v1_templ = "$Lh\{8}-$Lh\{4}-1$Lh\{3}-$Lh\{4}-$Lh\{12}";
    my $v1rand_templ = "$Lh\{8}-$Lh\{4}-1$Lh\{3}-$Lh\{4}-$Lh\[37bf]$Lh\{10}";

    if ($Opt{'pg-table'}) {
        print(
            "CREATE TABLE uuids (\n" .
            "    t timestamp,\n" .
            "    u uuid,\n" .
            "    tag varchar[],\n" .
            "    host varchar,\n" .
            "    cwd varchar,\n" .
            "    username varchar,\n" .
            "    tty varchar,\n" .
            "    sess varchar[],\n" .
            "    txt varchar,\n" .
            "    s xml\n" .
            ");\n"
        );
    }

    if ($Opt{'output-format'} eq 'postgres') {
        print("COPY uuids (t, u, tag, host, cwd, username, tty, sess, txt, s) FROM stdin;\n");
    }
    while (my $line = <>) {
        chomp($line);
        if ($line =~ /^\s*(<suuid t="2\d\d\d-\d\d-\d\dT\d\d:\d\d.*Z.*<\/suuid>)$/) {
            my $suuid = $1;
            my $uuid = '';
            my $date = '';
            my $host = '';
            my $cwd = '';
            my $username = '';
            my $tty = '';
            my $txt = '';
            my @tag = ();
            my @sess = ();
            ($suuid =~ s/\s*<suuid t="(2\d\d\d-\d\d-\d\dT.+?Z).*?" u="(.*?)">\s*/ /) && (($date, $uuid) = ($1, $2));
            $suuid =~ s!</suuid>!!;
            $suuid =~ s/\s*<tag>([^<]+)<\/tag>\s*/(push(@tag, $1), ' ')/ge;
            ($suuid =~ s/\s*<host>([^<]+)<\/host>\s*/ /) && ($host = $1);
            ($suuid =~ s/\s*<cwd>([^<]+)<\/cwd>\s*/ /) && ($cwd = $1);
            ($suuid =~ s/\s*<user>([^<]+)<\/user>\s*/ /) && ($username = $1);
            ($suuid =~ s/\s*<tty>([^<]+)<\/tty>\s*/ /) && ($tty = $1);
            ($suuid =~ s/\s*<txt>(.+)<\/txt>\s*/ /) && ($txt = $1);
            $suuid =~ s{
                \s*
                <sess
                    \s*
                    desc="([^"]+)"
                    .*?
                >($Templ)</sess>
                \s*
            }{
                (
                    push(@sess, "$1/$2"),
                    msg(4, "push '$1/$2' to sess"),
                    ' ',
                )
            }egx;
            $suuid =~ s/^\s+//;
            $suuid =~ s/\s+$//;
            $suuid =~ s/>\s+</> </g;
            msg(3, "Left in suuid: '$suuid'");
            msg(3, "tag: '" . join('|', @tag) . "'");
            if ($Opt{'output-format'} eq 'postgres') {
                print(
                    join("\t",
                        $date,
                        $uuid,
                        scalar(@tag) ? ("{'" . join("','", @tag) . "'}") : '\N',
                        safe_sql($host, 1),
                        safe_sql($cwd, 1),
                        safe_sql($username, 1),
                        safe_sql($tty, 1),
                        scalar(@sess) ? ("{'" . join("','", @sess) . "'}") : '\N',
                        safe_sql($txt, 1),
                        safe_sql($line, 1),
                    ) . "\n",
                );
            } elsif ($Opt{'output-format'} eq 'xml') {
                print("$line\n");
            } else {
                warn("$progname: $Opt{'output-format'}: Unknown output format\n");
                $Retval = 1;
                last;
            }
        }
    }
    if ($Opt{'output-format'} eq 'postgres') {
        print("\\.\n");
    }

    return($Retval);
    # }}}
} # main()

sub safe_sql {
    # {{{
    my ($Text, $use_null) = @_;
    $Text =~ s/\\/\\\\/g;
    $Text =~ s/'/''/g;
    $Text =~ s/\n/\\n/g;
    $Text =~ s/\r/\\r/g;
    $Text =~ s/\t/\\t/g;
    $use_null && !length($Text) && ($Text = '\N');
    return($Text);
    # }}}
} # safe_sql()

sub print_version {
    # Print program version {{{
    print("$progname v$VERSION\n");
    return;
    # }}}
} # print_version()

sub usage {
    # Send the help message to stdout {{{
    my $Retval = shift;

    if ($Opt{'verbose'}) {
        print("\n");
        print_version();
    }
    print(<<"END");

Usage: $progname [options] [file [files [...]]]

Options:

  -h, --help
    Show this help.
  -o X, --output-format X
    Use X as output format. Currently supported:
      - postgres
      - xml
        This is the standard format it's been using for years.
  -q, --quiet
    Be more quiet. Can be repeated to increase silence.
  --pg-table
    Output Postgres commands for creating the necessary tables.
  -v, --verbose
    Increase level of verbosity. Can be repeated.
  --version
    Print version information.

END
    exit($Retval);
    # }}}
} # usage()

sub msg {
    # Print a status message to stderr based on verbosity level {{{
    my ($verbose_level, $Txt) = @_;

    if ($Opt{'verbose'} >= $verbose_level) {
        print(STDERR "$progname: $Txt\n");
    }
    return;
    # }}}
} # msg()

__END__

# Plain Old Documentation (POD) {{{

=pod

=head1 NAME



=head1 SYNOPSIS

 [options] [file [files [...]]]

=head1 DESCRIPTION



=head1 OPTIONS

=over 4

=item B<-h>, B<--help>

Print a brief help summary.

=item B<-q>, B<--quiet>

Be more quiet. Can be repeated to increase silence.

=item B<-v>, B<--verbose>

Increase level of verbosity. Can be repeated.

=item B<--version>

Print version information.

=back

=head1 BUGS



=head1 AUTHOR

Made by Øyvind A. Holm S<E<lt>sunny@sunbase.orgE<gt>>.

=head1 COPYRIGHT

Copyleft © Øyvind A. Holm E<lt>sunny@sunbase.orgE<gt>
This is free software; see the file F<COPYING> for legalese stuff.

=head1 LICENCE

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2 of the License, or (at your 
option) any later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along 
with this program.
If not, see L<http://www.gnu.org/licenses/>.

=head1 SEE ALSO

=cut

# }}}

# vim: set fenc=UTF-8 ft=perl fdm=marker ts=4 sw=4 sts=4 et fo+=w :
