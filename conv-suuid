#!/usr/bin/env perl

#=======================================================================
# conv-suuid
# File ID: 39647b28-1261-11e5-9dd0-000df06acc56
#
# Convert suuid .xml to other formats.
#
# Character set: UTF-8
# ©opyleft 2015– Øyvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 2 or later, see end of 
# file for legal stuff.
#=======================================================================

use strict;
use warnings;
use Getopt::Long;

local $| = 1;

our %Opt = (

    'create-table' => 0,
    'help' => 0,
    'output-format' => 'xml',
    'quiet' => 0,
    'verbose' => 0,
    'version' => 0,

);

our $progname = $0;
$progname =~ s/^.*\/(.*?)$/$1/;
our $VERSION = '0.3.0';

Getopt::Long::Configure('bundling');
GetOptions(

    'create-table' => \$Opt{'create-table'},
    'help|h' => \$Opt{'help'},
    'output-format|o=s' => \$Opt{'output-format'},
    'quiet|q+' => \$Opt{'quiet'},
    'verbose|v+' => \$Opt{'verbose'},
    'version' => \$Opt{'version'},

) || die("$progname: Option error. Use -h for help.\n");

$Opt{'verbose'} -= $Opt{'quiet'};
$Opt{'help'} && usage(0);
if ($Opt{'version'}) {
    print_version();
    exit(0);
}

exit(main());

sub main {
    # {{{
    my $Retval = 0;

    my $Lh = "[0-9a-fA-F]";
    my $Templ = "$Lh\{8}-$Lh\{4}-$Lh\{4}-$Lh\{4}-$Lh\{12}";
    my $v1_templ = "$Lh\{8}-$Lh\{4}-1$Lh\{3}-$Lh\{4}-$Lh\{12}";
    my $v1rand_templ = "$Lh\{8}-$Lh\{4}-1$Lh\{3}-$Lh\{4}-$Lh\[37bf]$Lh\{10}";

    if ($Opt{'create-table'}) {
        if ($Opt{'output-format'} eq "postgres") {
            print_pg_table();
        } elsif ($Opt{'output-format'} eq "sqlite") {
            print_sqlite_table();
        } else {
            warn("$progname: $Opt{'output-format'}: Unknown output format\n");
            return 1;
        }
    }

    if ($Opt{'output-format'} eq 'postgres') {
        print("COPY new (t, u, tag, host, cwd, username, tty, sess, txt, s) FROM stdin;\n");
    } elsif ($Opt{'output-format'} eq 'sqlite') {
        print("BEGIN TRANSACTION;\n");
    }
    while (my $line = <>) {
        chomp($line);
        if ($line =~ /^\s*(<suuid t="2\d\d\d-\d\d-\d\dT\d\d:\d\d.*Z.*<\/suuid>)$/) {
            my $suuid = $1;
            my $uuid = '';
            my $date = '';
            my $host = '';
            my $cwd = '';
            my $username = '';
            my $tty = '';
            my $txt = '';
            my @tag = ();
            my @sess = ();
            ($suuid =~ s/\s*<suuid t="(2\d\d\d-\d\d-\d\dT.+?Z).*?" u="(.*?)">\s*/ /) && (($date, $uuid) = ($1, $2));
            $suuid =~ s!</suuid>!!;
            ($suuid =~ s/\s*<txt>(.+)<\/txt>\s*/ /) && ($txt = $1);
            $suuid =~ s/\s*<tag>([^<]+)<\/tag>\s*/(push(@tag, $1), ' ')/ge;
            ($suuid =~ s/\s*<host>([^<]+)<\/host>\s*/ /) && ($host = $1);
            ($suuid =~ s/\s*<cwd>([^<]+)<\/cwd>\s*/ /) && ($cwd = $1);
            ($suuid =~ s/\s*<user>([^<]+)<\/user>\s*/ /) && ($username = $1);
            ($suuid =~ s/\s*<tty>([^<]+)<\/tty>\s*/ /) && ($tty = $1);
            $suuid =~ s{
                \s*
                <sess
                    \s*
                    (desc="[^"]+")?
                    .*?
                >($Templ)</sess>
                \s*
            }{
                my ($l_desc, $l_uuid) = ($1, $2);
                if (defined($l_desc) && $l_desc =~ /desc="(.+?)"/) {
                    $l_desc = "$1/";
                } else {
                    $l_desc = '';
                }
                (
                    push(@sess, "$l_desc$l_uuid"),
                    msg(4, "push '$l_desc$l_uuid' to sess"),
                    ' ',
                )
            }egx;
            $suuid =~ s/^\s+//;
            $suuid =~ s/\s+$//;
            $suuid =~ s/>\s+</> </g;
            msg(3, "Left in suuid: '$suuid'");
            msg(3, "tag: '" . join('|', @tag) . "'");
            if ($Opt{'output-format'} eq 'sqlite') {
                $txt =~ s/&amp;/&/g;
                $txt =~ s/&lt;/</g;
                $txt =~ s/&gt;/>/g;
                $txt =~ s/(\\[\\nt])/unescape($1)/eg;
                print("INSERT INTO uuids " .
                    "(t,u,tag,host,cwd,username,tty,sess,txt,s) " .
                    "VALUES(",
                    join(",",
                        "'$date'",
                        "'$uuid'",
                        scalar(@tag) ? ("'{\"" . join('","', @tag) . "\"}'")
                                     : 'NULL',
                        "'" . doublequote($host) . "'",
                        "'" . doublequote($cwd) . "'",
                        "'" . doublequote($username) . "'",
                        "'" . doublequote($tty) . "'",
                        "'" . scalar(@sess) ? ("'[\"" .
                                                join('","', @sess) .
                                              "\"]'")
                                            : 'NULL',
                        "'" . doublequote($txt) . "'",
                        "'" . doublequote($line) . "'",
                    ) . ");\n",
                );
            } elsif ($Opt{'output-format'} eq 'postgres') {
                print(
                    join("\t",
                        $date,
                        $uuid,
                        scalar(@tag) ? ("{'" . join("','", @tag) . "'}") : '\N',
                        safe_sql($host, 1),
                        safe_sql($cwd, 1),
                        safe_sql($username, 1),
                        safe_sql($tty, 1),
                        scalar(@sess) ? ("{'" . join("','", @sess) . "'}") : '\N',
                        safe_sql($txt, 1),
                        safe_sql($line, 1),
                    ) . "\n",
                );
            } elsif ($Opt{'output-format'} eq 'xml') {
                print("$line\n");
            } else {
                warn("$progname: $Opt{'output-format'}: Unknown output format\n");
                $Retval = 1;
                last;
            }
        }
    }
    if ($Opt{'output-format'} eq 'postgres') {
        print("\\.\n");
    } elsif ($Opt{'output-format'} eq 'sqlite') {
        print("COMMIT;\n");
    }

    return $Retval;
    # }}}
} # main()

sub unescape {
    my $char = shift;

    if ($char eq '\\\\') {
        return '\\';
    } elsif ($char eq '\\n') {
        return "\n";
    } elsif ($char eq '\\t') {
        return "\t";
    }
}

sub print_pg_table {
        print(<<END);
CREATE TABLE uuids (
    t timestamp,
    u uuid,
    tag varchar[],
    host varchar,
    cwd varchar,
    username varchar,
    tty varchar,
    sess varchar[],
    txt varchar,
    s xml
);
CREATE TABLE new AS
    SELECT * FROM uuids LIMIT 0;
CREATE TABLE new_rej AS
    SELECT * FROM uuids LIMIT 0;

CREATE OR REPLACE FUNCTION loop_new() RETURNS trigger AS \$\$
DECLARE
    curr_id uuid;
BEGIN
    LOOP
        curr_id = (SELECT u FROM new LIMIT 1);
        IF curr_id IS NOT NULL THEN
            IF (SELECT u FROM uuids WHERE u = curr_id LIMIT 1) IS NOT NULL THEN
                INSERT INTO new_rej SELECT * FROM new WHERE u = curr_id;
            ELSE
                INSERT INTO uuids SELECT * FROM new WHERE u = curr_id;
            END IF;
            DELETE FROM new WHERE u = curr_id;
        ELSE
            EXIT;
        END IF;
    END LOOP;
    RETURN NULL;
END;
\$\$ LANGUAGE plpgsql;

CREATE TRIGGER trg_insert_new AFTER INSERT
    ON new
    EXECUTE PROCEDURE loop_new();

CREATE INDEX idx_uuids_u ON uuids (u);
CREATE INDEX idx_uuids_t ON uuids (t);
CREATE INDEX idx_new_u ON new (u);

END
    return;
}

sub print_sqlite_table {
        print(<<END);
CREATE TABLE IF NOT EXISTS uuids (
    t TEXT,
    u TEXT,
    tag JSON,
    host TEXT,
    cwd TEXT,
    username TEXT,
    tty TEXT,
    sess JSON,
    txt TEXT,
    s TEXT
      UNIQUE
        ON CONFLICT IGNORE
);

END
    return;
}

sub doublequote {
    my $txt = shift;

    $txt =~ s/'/''/gs;
    return $txt;
}

sub safe_sql {
    # {{{
    my ($Text, $use_null) = @_;
    $Text =~ s/\\/\\\\/g;
    $Text =~ s/'/''/g;
    $Text =~ s/\n/\\n/g;
    $Text =~ s/\t/\\t/g;
    $use_null && !length($Text) && ($Text = '\N');
    return($Text);
    # }}}
} # safe_sql()

sub print_version {
    # Print program version {{{
    print("$progname $VERSION\n");
    return;
    # }}}
} # print_version()

sub usage {
    # Send the help message to stdout {{{
    my $Retval = shift;

    if ($Opt{'verbose'}) {
        print("\n");
        print_version();
    }
    print(<<"END");

Usage: $progname [options] [file [files [...]]]

Options:

  --create-table
    Output SQL commands for creating the necessary tables and indexes.
  -h, --help
    Show this help.
  -o X, --output-format X
    Use X as output format. Currently supported:
      - postgres
      - sqlite
      - xml
        This is the standard format it's been using for years.
  -q, --quiet
    Be more quiet. Can be repeated to increase silence.
  -v, --verbose
    Increase level of verbosity. Can be repeated.
  --version
    Print version information.

END
    exit($Retval);
    # }}}
} # usage()

sub msg {
    # Print a status message to stderr based on verbosity level {{{
    my ($verbose_level, $Txt) = @_;

    if ($Opt{'verbose'} >= $verbose_level) {
        print(STDERR "$progname: $Txt\n");
    }
    return;
    # }}}
} # msg()

__END__

# This program is free software; you can redistribute it and/or modify 
# it under the terms of the GNU General Public License as published by 
# the Free Software Foundation; either version 2 of the License, or (at 
# your option) any later version.
#
# This program is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License 
# along with this program.
# If not, see L<http://www.gnu.org/licenses/>.

# vim: set fenc=UTF-8 ft=perl fdm=marker ts=4 sw=4 sts=4 et fo+=w :
