#!/usr/bin/env perl

#==============================================================================
# finduuid
# File ID: fdfa398c-f742-11dd-8d5f-000475e441b9
#
# Scan files for UUIDs.
#
# Character set: UTF-8
# ©opyleft 2008– Øyvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 2 or later, see end of file for 
# legal stuff.
#==============================================================================

use strict;
use warnings;
use bigint;
use Getopt::Long;

local $| = 1;

our %Opt = (

	'date' => 0,
	'filenames' => 0,
	'help' => 0,
	'line' => 0,
	'quiet' => 0,
	'reverse' => 0,
	'unique' => 0,
	'verbose' => 0,
	'version' => 0,

);

our $progname = $0;
$progname =~ s/^.*\/(.*?)$/$1/;
our $VERSION = '0.1.0';

Getopt::Long::Configure('bundling');
GetOptions(

	'date|d' => \$Opt{'date'},
	'filenames|f' => \$Opt{'filenames'},
	'help|h' => \$Opt{'help'},
	'line|l' => \$Opt{'line'},
	'quiet|q+' => \$Opt{'quiet'},
	'reverse|r' => \$Opt{'reverse'},
	'unique|u' => \$Opt{'unique'},
	'verbose|v+' => \$Opt{'verbose'},
	'version' => \$Opt{'version'},

) || die("$progname: Option error. Use -h for help.\n");

$Opt{'verbose'} -= $Opt{'quiet'};
$Opt{'help'} && usage(0);
if ($Opt{'version'}) {
	print_version();
	exit(0);
}

my $Lh = "[0-9a-fA-F]";
my $v1_templ = "$Lh\{8}-$Lh\{4}-1$Lh\{3}-$Lh\{4}-$Lh\{12}";
my %uuid_list = ();
my $exit_value = 1;

exit(main());

sub main {
	my $Retval = 0;
	my $Lh = "[0-9a-fA-F]";
	my $Templ = "$Lh\{8}-$Lh\{4}-$Lh\{4}-$Lh\{4}-$Lh\{12}";

	if ($Opt{'reverse'}) {
		while (<>) {
			s/$Templ//g;
			print;
		}
		return($Retval);
	}

	while (<>) {
		chomp(my $Line = $_);
		if (/$Templ/) {
			if ($Opt{'line'}) {
				my $print_line = 0;
				my $Scan = $Line;
				$Scan =~ s{
				    ($Templ)
				}{
				    defined($uuid_list{lc($1)}) ||
				        ($print_line = 1), ""
				}egx;
				if ($print_line) {
					if ($Opt{'unique'}) {
						$Scan = $Line;
						$Scan =~ s{
						    ($Templ)
						}{
						    $uuid_list{lc($1)} = 1, ""
						}egx;
					}
					$Opt{'date'} && ($Line =~ s{
					    ($v1_templ)
					}{
					    sprintf("%s(%s)",
					            $1, uuid_time2($1))
					}egsx);
					printf("%s%s\n", ($Opt{'filenames'}
					    ? "$ARGV:" : ""), $Line);
					$exit_value = 0;
				}
			} else {
				$Line =~ s/($Templ)/print_uuid($1)/ge;
			}
		}
	}

	return($exit_value);
}

sub print_uuid {
	my $uuid = shift;
	my $lc_uuid = lc($uuid);
	$Opt{'unique'} && defined($uuid_list{$lc_uuid}) && return("");
	$Opt{'date'} && ($uuid =~ s{
	    ($v1_templ)
	}{
	    sprintf("%s(%s)", $1, uuid_time2($1))
	}egsx);
	printf("%s%s\n", ($Opt{'filenames'} ? "$ARGV:" : ""), $uuid);
	$uuid_list{$lc_uuid} = 1;
	$exit_value = 0;
	return("");
}

sub uuid_time2 {
	my $uuid = shift;
	my $Retval = "";
	($uuid =~ /^$v1_templ$/) || return("");
	my $hex_string = uuid_hex_date($uuid);
	my $val = bighex($hex_string);
	my $nano = sprintf("%07u", $val % 10_000_000);
	my $t = ($val / 10_000_000) - 12_219_292_800;
	my @TA = gmtime($t);
	$Retval = sprintf("%04u-%02u-%02uT%02u:%02u:%02u.%sZ",
		$TA[5]+1900, $TA[4]+1, $TA[3],
		$TA[2], $TA[1], $TA[0], $nano);
	return($Retval);
}

sub uuid_hex_date {
	my $uuid = shift;
	my $time_low = lc(substr($uuid, 0, 8));
	my $time_mid = lc(substr($uuid, 9, 4));
	my $time_hi = lc(substr($uuid, 15, 3));
	# CO: Notes {{{
	# 2639d59e-fa20-11dd-8aa6-000475e441b9
	# 012345678901234567890123456789012345
	# 000000000011111111112222222222333333
	#
	# 2639d59e 0-3 time_low (0-7)
	# -
	# fa20 4-5 time_mid (9-12)
	# -
	# 11dd 6-7 time_hi_and_version (15-17)
	# -
	# 8a  8 clock_seq_hi_and_reserved (19-20)
	# a6  9 clock_seq_low (21-22)
	# -
	# 000475e441b9 10-15 node (24-35)
	# }}}
	my $Retval = "$time_hi$time_mid$time_low";
	# D("uuid_hex_date('$uuid') returns '$Retval'");
	return($Retval);
}

sub bighex {
	my $Hex = scalar reverse shift;
	my $Retval = 0;
	my $Digit = 1;
	$Hex =~ s{
		([0-9A-Fa-f])
	} {
		$Retval += hex($1) * $Digit;
		$Digit *= 16;
		"";
	}gsex;
	length($Hex) && ($Retval = NaN());
	return($Retval);
}

sub print_version {
	# Print program version
	print("$progname $VERSION\n");
	return;
}

sub usage {
	# Send the help message to stdout
	my $Retval = shift;

	if ($Opt{'verbose'}) {
		print("\n");
		print_version();
	}
	print(<<"END");

Scan files for UUIDs. Returns 0 if at least one UUID was found, 1 
otherwise.

Usage: $progname [options] [file [files [...]]]

Options:

  -d, --date
    Display timestamp in parantheses after the UUID. Example:
      b5bf6012-4bb6-11e2-bdd3-0016d364066c(2012-12-21T21:38:07.9885330Z)
  -f, --filenames
    Include file names in output.
  -h, --help
    Show this help.
  -l, --line
    Print the whole line where UUIDs are found.
  -q, --quiet
    Be more quiet. Can be repeated to increase silence.
  -u, --unique
    Print only the first occurence of every uuid.
  -v, --verbose
    Increase level of verbosity. Can be repeated.
  --version
    Print version information.

END
	exit($Retval);
}

sub msg {
	# Print a status message to stderr based on verbosity level
	my ($verbose_level, $Txt) = @_;

	if ($Opt{'verbose'} >= $verbose_level) {
		print(STDERR "$progname: $Txt\n");
	}
	return;
}

__END__

# This program is free software; you can redistribute it and/or modify it under 
# the terms of the GNU General Public License as published by the Free Software 
# Foundation; either version 2 of the License, or (at your option) any later 
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT 
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
# FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with 
# this program.
# If not, see L<http://www.gnu.org/licenses/>.

# vim: set ts=8 sw=8 sts=8 noet fo+=w tw=79 fenc=UTF-8 :
