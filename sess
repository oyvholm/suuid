#!/usr/bin/perl -w

#=======================================================================
# sess
# File ID: a7bbac50-fb83-11dd-947c-000475e441b9
# Log execution of a specific program
#
# Character set: UTF-8
# ©opyleft 2009– Øyvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 3 or later, see end of 
# file for legal stuff.
#=======================================================================

use strict;
use Getopt::Long;
use Time::HiRes;

$| = 1;

our $Debug = 0;

our %Opt = (

    'comment' => "",
    'debug' => 0,
    'description' => "",
    'help' => 0,
    'quiet' => 0,
    'tag' => "",
    'verbose' => 0,
    'version' => 0,

);

our $progname = $0;
$progname =~ s/^.*\/(.*?)$/$1/;
our $VERSION = "0.00";

Getopt::Long::Configure("bundling");
GetOptions(

    "comment|c=s" => \$Opt{'comment'},
    "debug" => \$Opt{'debug'},
    "description|d=s" => \$Opt{'description'},
    "help|h" => \$Opt{'help'},
    "quiet|q+" => \$Opt{'quiet'},
    "tag|t=s" => \$Opt{'tag'},
    "verbose|v+" => \$Opt{'verbose'},
    "version" => \$Opt{'version'},

) || die("$progname: Option error. Use -h for help.\n");

$Opt{'debug'} && ($Debug = 1);
my $legal_descchars = join('',
    '\x2d-\x2e', # -.
    '\x30-\x39', # 0-9
    '\x41-\x5a', # A-Z
    '\x5f',      # _
    '\x61-\x7a', # a-z
    '\x80-\xbf', # Valid UTF-8 bytes
    '\xc2-\xef', # Valid UTF-8 bytes
);

$Opt{'help'} && usage(0);
if ($Opt{'version'}) {
    print_version();
    exit(0);
}

my $Lh = "[0-9a-fA-F]";
my $v1_templ = "$Lh\{8}-$Lh\{4}-1$Lh\{3}-$Lh\{4}-$Lh\{12}";

my @Cmd = @ARGV;
my $cmd_str = join(" ", @ARGV);
scalar(@Cmd) || die("$progname: No command specified. Use -h for help.\n");
my $begin_cmd = sprintf(
    "suuid --raw%s -c \"<sess_begin> <cmd>%s</cmd>%s </sess_begin>\"",
    (length($Opt{'tag'})
        ? " --tag $Opt{'tag'}"
        : ""
    ),
    suuid_xml($cmd_str),
    (length($Opt{'comment'})
        ? sprintf(" <comment>%s</comment>", suuid_xml($Opt{'comment'}))
        : ""
    ),
);
chomp(my $uuid = `$begin_cmd`);
if (!defined($uuid) || $uuid !~ /^$v1_templ$/) {
    die("$progname: Error generating UUID, session not started\n");
}
$Opt{'quiet'} < 2 && print(STDERR "sess.begin:$uuid\n");
defined($ENV{'SESS_UUID'}) || ($ENV{'SESS_UUID'} = "");

my $descname = $Opt{'description'};
($descname =~ /[^$legal_descchars]/) && die("$progname: $descname: Invalid characters in description\n");
my $stripstr = $cmd_str;
$stripstr =~ s/^\.+//;
(!length($Opt{'description'}) && $stripstr =~ /^[^$legal_descchars]*([$legal_descchars]+).*/)
    && ($descname = $1);
msg(1, "descname = '$descname'");

$ENV{'SESS_UUID'} .= "$descname/$uuid,";
my $begin_time = Time::HiRes::time();
my $retval = system(@Cmd);
my $end_time = Time::HiRes::time();
msg(2, "SESS_UUID before s: '$ENV{'SESS_UUID'}'");
$ENV{'SESS_UUID'} =~ s/$descname\/$uuid,//;
msg(2, "SESS_UUID after s : '$ENV{'SESS_UUID'}'");

my $end_cmd = sprintf(
    "suuid --raw%s -c \"<sess_end> <finished>%s</finished> <cmd>%s</cmd>%s <duration>%s </duration> <exit>%s</exit> </sess_end>\"",
    (length($Opt{'tag'})
        ? " --tag $Opt{'tag'}"
        : ""
    ),
    $uuid,
    suuid_xml($cmd_str),
    (length($Opt{'comment'})
        ? sprintf(" <comment>%s</comment>", suuid_xml($Opt{'comment'}))
        : ""
    ),
    xml_time_period($end_time - $begin_time),
    $retval
);
chomp(my $end_uuid = `$end_cmd`);
$Opt{'quiet'} < 2 && print(STDERR "sess.end:$end_uuid");
$Opt{'quiet'} < 1 && printf(STDERR " -- %s, exit code '%d'.",
                            time_period($end_time - $begin_time), $retval);
$Opt{'quiet'} < 2 && print(STDERR "\n");

sub suuid_xml {
    # {{{
    my ($Str, $skip_xml) = @_;
    defined($skip_xml) || ($skip_xml = 0);
    if (!$skip_xml) {
        $Str =~ s/&/&amp;/gs;
        $Str =~ s/</&lt;/gs;
        $Str =~ s/>/&gt;/gs;
    }
    $Str =~ s/\\/\\\\/gs;
    $Str =~ s/\n/\\n/gs;
    $Str =~ s/\r/\\r/gs;
    $Str =~ s/\t/\\t/gs;
    return($Str);
    # }}}
} # suuid_xml()

sub print_version {
    # Print program version {{{
    print("$progname v$VERSION\n");
    # }}}
} # print_version()

sub usage {
    # Send the help message to stdout {{{
    my $Retval = shift;

    if ($Opt{'verbose'}) {
        print("\n");
        print_version();
    }
    print(<<END);

Usage: $progname [options] [--] command

Execute a command and log start and end time with suuid(1). If the 
command contains options, include the -- option to switch off parameter 
parsing of the command. The uuid of the session can be read from the 
SESS_UUID environment variable.

Options:

  -c X, --comment X
    Specify X as comment.
  -d X, --description X
    Use X as descriptive name in \$SESS_UUID. If not specified, the 
    first characters in the regexp range
      [$legal_descchars]
    will be used.
  -h, --help
    Show this help.
  -q, --quiet
    Use less output. Can be repeated. -qq = totally quiet.
  -t X, --tag X
    Use X as tag (category). Several tags are separated by comma.
  -v, --verbose
    Increase level of verbosity. Can be repeated.
  --version
    Print version information.
  --debug
    Print debugging messages.

END
    exit($Retval);
    # }}}
} # usage()

sub time_period {
	# {{{
	my $secs = shift;
	my ($Day, $Hour, $Min, $Sec) = (0, 0, 0, 0);

	$Day = int($secs / 86400);
	$secs -= $Day * 86400;

	$Hour = int($secs / 3600);
	$secs -= $Hour * 3600;

	$Min = int($secs / 60);
	$secs -= $Min * 60;

	$Sec = sprintf("%.7f", $secs);
    $Sec =~ s/^(\d\..*)/0$1/; # WTF. %02.7f in sprintf() dosn’t work, so this is necessary ATM.

	return(
        ($Day
            ? sprintf("%s day%s, ", $Day, $Day == 1 ? "" : "s")
            : ""
        ) . sprintf("%02u:%02u:%s", $Hour, $Min, $Sec)
    );
	# }}}
} # time_period()

sub xml_time_period {
	# {{{
	my $secs = shift;
	my ($Day, $Hour, $Min, $Sec) = (0, 0, 0, 0);
    my $totsecs = sprintf("%.7f", $secs);

	$Day = int($secs / 86400);
	$secs -= $Day * 86400;

	$Hour = int($secs / 3600);
	$secs -= $Hour * 3600;

	$Min = int($secs / 60);
	$secs -= $Min * 60;

    $Sec = sprintf("%.7f", $secs);

	return(
        " <totsecs>$totsecs</totsecs>" .
        ($Day ? " <days>$Day</days>" : "") .
        ($Hour ? " <hours>$Hour</hours>" : "") .
        ($Min ? " <minutes>$Min</minutes>" : "") .
        ($Sec ? " <seconds>$Sec</seconds>" : "")
    );
	# }}}
} # xml_time_period()

sub msg {
    # Print a status message to stderr based on verbosity level {{{
    my ($verbose_level, $Txt) = @_;

    if ($Opt{'verbose'} >= $verbose_level) {
        print(STDERR "$progname: $Txt\n");
    }
    # }}}
} # msg()

sub D {
    # Print a debugging message {{{
    $Debug || return;
    my @call_info = caller;
    chomp(my $Txt = shift);
    my $File = $call_info[1];
    $File =~ s#\\#/#g;
    $File =~ s#^.*/(.*?)$#$1#;
    print(STDERR "$File:$call_info[2] $$ $Txt\n");
    return("");
    # }}}
} # D()

__END__

# Plain Old Documentation (POD) {{{

=pod

=head1 NAME



=head1 SYNOPSIS

 [options] [file [files [...]]]

=head1 DESCRIPTION



=head1 OPTIONS

=over 4

=item B<-h>, B<--help>

Print a brief help summary.

=item B<-v>, B<--verbose>

Increase level of verbosity. Can be repeated.

=item B<--version>

Print version information.

=item B<--debug>

Print debugging messages.

=back

=head1 BUGS



=head1 AUTHOR

Made by Øyvind A. Holm S<E<lt>sunny@sunbase.orgE<gt>>.

=head1 COPYRIGHT

Copyleft © Øyvind A. Holm E<lt>sunny@sunbase.orgE<gt>
This is free software; see the file F<COPYING> for legalese stuff.

=head1 LICENCE

This program is free software: you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation, either version 3 of the License, or (at your 
option) any later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along 
with this program.
If not, see L<http://www.gnu.org/licenses/>.

=head1 SEE ALSO

=cut

# }}}

# vim: set fenc=UTF-8 ft=perl fdm=marker ts=4 sw=4 sts=4 et fo+=w :
