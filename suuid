#!/usr/bin/perl -w

#=======================================================================
# $Id$
# Generate and store UUID with optional comment in a log file.
#
# Character set: UTF-8
# ©opyleft 2008– Øyvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 2 or later, see end of 
# file for legal stuff.
#=======================================================================

BEGIN {
    our @version_array;
}

use strict;
use Getopt::Long;
use OSSP::uuid;

$| = 1;

our $Debug = 0;

our %Std = (
    'logdir' => "$ENV{'HOME'}/uuids",
    'version' => 1,
);

our %Opt = (
    'comment' => "",
    'count' => 1,
    'debug' => 0,
    'help' => 0,
    'logdir' => $Std{'logdir'},
    'show-version' => $Std{'show-version'},
    'tag' => "",
    'verbose' => 0,
    'version' => $Std{'version'},
);

our $progname = $0;
$progname =~ s/^.*\/(.*?)$/$1/;

my $rcs_id = '$Id$';
my $id_date = $rcs_id;
$id_date =~ s/^.*?\d+ (\d\d\d\d-.*?\d\d:\d\d:\d\d\S+).*/$1/;

push(@main::version_array, $rcs_id);

Getopt::Long::Configure("bundling");
GetOptions(
    "comment|c=s" => \$Opt{'comment'},
    "count|n=i" => \$Opt{'count'},
    "debug" => \$Opt{'debug'},
    "help|h" => \$Opt{'help'},
    "logdir|l=s" => \$Opt{'logdir'},
    "show-version|V" => \$Opt{'show-version'},
    "tag|t=s" => \$Opt{'tag'},
    "verbose" => \$Opt{'verbose'},
    "version|v=i" => \$Opt{'version'},
) || die("$progname: Option error. Use -h for help.\n");

if ($Opt{'version'} !~ /^[14]$/) {
    die("$progname: $Opt{'version'}: Invalid --version value, has to be 1 or 4.\n");
}

$Opt{'debug'} && ($Debug = 1);
$Opt{'help'} && usage(0);
$Opt{'show-version'} && print_version();

tie my $new_uuid, 'OSSP::uuid::tie';

$new_uuid = [ "v1" ];
my $Host = $new_uuid;
$Host =~ s/^.*-([[:xdigit:]]+)$/$1/;

$new_uuid = [ "v$Opt{'version'}" ];

if (!-d "$Opt{'logdir'}/.") {
    die("$progname: $Opt{'logdir'}: Log directory not found\n");
}
my $Logfile = "$Opt{'logdir'}/$Host";

my %uuids = ();
my $Comment = length($Opt{'comment'}) ? $Opt{'comment'} : "";
my $Tag = length($Opt{'tag'}) ? $Opt{'tag'} : "";
for (my $Count = 0; $Count < $Opt{'count'}; $Count++) {
    my $uuid = $new_uuid;
    my $curr_time = time;
    print("$uuid\n");
    $uuids{$uuid} = join("\t",
        sec_to_string($curr_time),
        safe_tab($Tag),
        safe_tab($Comment)
    );
}

if (open(LogFP, ">>", $Logfile)) {
    for my $key (keys %uuids) {
        D("key = '$key', value = '$uuids{$key}'");
        print(LogFP $key . "\t" . $uuids{$key} . "\n");
    }
    close(LogFP);
} else {
    die("$progname: $Logfile: Cannot open file for append: $!\n");
}

sub safe_tab {
    # {{{
    my $Str = shift;
    $Str =~ s/\\/\\\\/gs;
    $Str =~ s/\n/\\n/gs;
    $Str =~ s/\r/\\r/gs;
    $Str =~ s/\t/\\t/gs;
    return($Str);
    # }}}
} # safe_tab()

sub sec_to_string {
    # Convert seconds since 1970 to "yyyy-mm-ddThh:mm:ssZ" {{{
    my ($Seconds) = shift;

    my @TA = gmtime($Seconds);
    my($DateString) = sprintf("%04u-%02u-%02uT%02u:%02u:%02uZ",
                              $TA[5]+1900, $TA[4]+1, $TA[3],
                              $TA[2], $TA[1], $TA[0]);
    return($DateString);
    # }}}
} # sec_to_string()

sub print_version {
    # Print program version {{{
    for (@main::version_array) {
        print("$_\n");
    }
    exit(0);
    # }}}
} # print_version()

sub usage {
    # Send the help message to stdout {{{
    my $Retval = shift;

    print(<<END);

$rcs_id

Usage: $progname [options]

Generates one or more UUIDs and stores it to a log file with optional 
comment or tag/category.

Options:

  -c x, --comment x
    Store comment x in the log file.
  -h, --help
    Show this help.
  -l x, --logdir x
    Store log files in directory x.
    Default: $Std{'logdir'}/
  -n x, --count x
    Print and store x UUIDs.
  -t x, --tag x
    Use x as tag (category).
  --verbose
    Increase level of verbosity. Can be repeated.
  -v x, --version x
    Generate UUID version x.
  -V, --show-version
    Print version information.
  --debug
    Print debugging messages.

END
    exit($Retval);
    # }}}
} # usage()

sub msg {
    # Print a status message to stderr based on verbosity level {{{
    my ($verbose_level, $Txt) = @_;

    if ($Opt{'verbose'} >= $verbose_level) {
        print(STDERR "$progname: $Txt\n");
    }
    # }}}
} # msg()

sub D {
    # Print a debugging message {{{
    $Debug || return;
    my @call_info = caller;
    chomp(my $Txt = shift);
    my $File = $call_info[1];
    $File =~ s#\\#/#g;
    $File =~ s#^.*/(.*?)$#$1#;
    print(STDERR "$File:$call_info[2] $$ $Txt\n");
    return("");
    # }}}
} # D()

__END__

# Plain Old Documentation (POD) {{{

=pod

=head1 NAME



=head1 REVISION

$Id$

=head1 SYNOPSIS

 [options] [file [files [...]]]

=head1 DESCRIPTION



=head1 OPTIONS

=over 4

=item B<-h>, B<--help>

Print a brief help summary.

=item B<-v>, B<--verbose>

Increase level of verbosity. Can be repeated.

=item B<--version>

Print version information.

=item B<--debug>

Print debugging messages.

=back

=head1 BUGS



=head1 AUTHOR

Made by Øyvind A. Holm S<E<lt>sunny@sunbase.orgE<gt>>.

=head1 COPYRIGHT

Copyleft © Øyvind A. Holm E<lt>sunny@sunbase.orgE<gt>
This is free software; see the file F<COPYING> for legalese stuff.

=head1 LICENCE

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2 of the License, or (at your 
option) any later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

=head1 SEE ALSO

=cut

# }}}

# vim: set fenc=UTF-8 ft=perl fdm=marker ts=4 sw=4 sts=4 et fo+=w :
# End of file $Id$
