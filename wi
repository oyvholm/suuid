#!/bin/bash

#=======================================================================
# wi
# File ID: afcf3af0-27a5-11e1-b643-4b2592583869
# [Description]
# License: GNU General Public License version 2 or later.
#=======================================================================

progname=wi
version=0.0.1

msg() {
    echo $* >&2
}

is_uuid() {
    local x="[[:xdigit:]]"
    echo "$1" | grep -q -E "^$x{8}-$x{4}-$x{4}-$x{4}-$x{12}\$" &&
        echo 1 ||
        echo 0
}

unset test_simul
if test "$1" = "--test-simul"; then
    test_simul=1
    shift
fi
unset opt_sql
if test "$1" = "--sql"; then
    opt_sql=1
    shift
fi
if test -n "$test_simul" -a -n "$opt_sql"; then
    echo $progname: Cannot mix --sql and --test-simul >&2
    exit 1
fi

if test "$1" = "-h" -o "$1" = "--help"; then
    cat <<END

Search the suuids database and send results to stdout.

Syntax: $progname [options] [search expression]

Options:

    -h, --help
        Show this help.
    --sql
        Send generated SQL to stdout instead of performing a search. 
        Must be the first command line argument.
    --test-simul
        If this is specified as first argument, don't actually do 
        anything. This will only send diagnostic messages to stderr. 
        Used by 'wi.t'.
    --version
        Display program version.

"-a" and "-o" can be used as modifiers to the search. "-a" is replaced 
by "AND" and "-o" is replaced with OR.

-i turns case sensitivity OFF for all following search patterns ('abc' 
will find 'abc', 'ABC' and 'AbC', etc).

-I switches case sensitivity ON for all following patterns, this is the 
default.

-u interprets all following UUIDs to be searched for in the 'u' column 
in the database. This increases the speed if only the initial suuid 
entry is interesting. -U goes back to matching the string against the 
whole entry.

For example:

    abc -o def
        abc OR def (default)
    abc -a def
        abc AND def
    abc -a def -o ghi
        abc AND def OR ghi
    -a abc def
        abc AND def
    abc def -a ghi jkl -o mno
        abc OR def AND ghi AND jkl OR mno
    abc -i def
       Searches for 'abc' OR all variants of 'def', i.e., 'DEF' and 
       'DeF' are also found.
    abc -a def -i ghi -o jkl
        Find (lowercase abc) AND (lowercase def) AND (all-case ghi) OR 
        (all-case jkl).
    abc -i def -I ghi
       'abc' must be lower case, 'def' can be all cases, ghi must match 
       case.
    ABC -a -i def -I ghi -o jkl
        Find (uppercase abc) AND (both-case def) AND (lowercase ghi) OR 
        (lowercase jkl).
    -u c0e9f45e-3022-11e5-a8c8-fefdb24f8e10 abc
        Find (the above UUID in column 'u') OR (lower-case abc).

END
    exit 0
fi

if test "$1" = "--version"; then
    echo $progname v$version
    exit 0
fi

search_str=
stdin=
andor=OR

if test ! -t 0; then
    stdin="`finduuid -u`"
fi

unset add_str
like_str=LIKE
for f in "$@" $stdin; do
    test -n "$test_simul" && msg "f = '$f'"
    case "$f" in
        (-I)
            like_str=LIKE
            ;;
        (-U)
            unset next_is_uuid
            ;;
        (-a)
            andor=AND
            ;;
        (-i)
            like_str=ILIKE
            ;;
        (-o)
            andor=OR
            ;;
        (-u)
            next_is_uuid="1"
            ;;
        (*)
            test -n "$add_str" && or_str="$andor "
            if test "$next_is_uuid" = "1" -a "$(is_uuid "$f")" = "1"; then
                search_str="$search_str ${or_str}u = '$f'"
            else
                search_str="$search_str ${or_str}s::varchar $like_str '%$f%'"
            fi
            add_str="1"
            ;;
    esac
done

test -z "$search_str" && {
    echo $progname: No search strings found >&2
    exit 1
}

sql_str="COPY (SELECT s FROM uuids WHERE$search_str) TO STDOUT;"

if test -n "$test_simul" -o -n "$opt_sql"; then
    # --test-simul or --sql is specified as $1, only output what 
    # would've been done
    echo "$sql_str"
else
    echo "$sql_str" |
    psql -X -q suuids |
    sort -u |
    less
fi
